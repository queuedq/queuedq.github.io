{"version":3,"sources":["webpack:///./src/templates/listing.jsx","webpack:///./src/templates/listing.module.scss","webpack:///./src/components/PostListing/PostListing.jsx","webpack:///./node_modules/url-join/lib/url-join.js","webpack:///./src/components/PostListing/PostListing.module.scss","webpack:///./node_modules/classnames/index.js","webpack:///./src/components/SEO/SEO.jsx"],"names":["Page","pageNum","isCurrentPage","currentPageNum","key","to","className","classnames","style","page","current","Listing","renderPagination","this","props","pageContext","pageCount","prevPage","nextPage","isFirstPage","isLastPage","aria-label","pagination","Array","map","_val","index","render","postEdges","data","allMarkdownRemark","edges","title","config","siteTitle","React","Component","listingQuery","module","exports","PostListing","getPostList","postList","forEach","postEdge","push","path","node","fields","slug","category","frontmatter","tags","cover","summary","date","moment","format","dateFormat","excerpt","timeToRead","post","postCard","postTitle","postCategory","postDate","postSummary","normalize","strArray","resultArray","length","TypeError","match","first","shift","replace","i","component","str","join","parts","split","arguments","slice","call","definition","hasOwn","hasOwnProperty","classNames","classes","arg","argType","isArray","inner","apply","default","SEO","description","image","postURL","postNode","postPath","postSEO","postMeta","siteLogo","urljoin","siteUrl","pathPrefix","siteDescription","getImagePath","imageURI","datePublished","dateFromFormat","toDate","authorJSONLD","name","userName","email","userEmail","address","userLocation","logoJSONLD","url","blogURL","schemaOrgJSONLD","alternateName","siteTitleAlt","itemListElement","position","item","headline","author","publisher","logo","content","type","JSON","stringify","property","siteFBAppID","userTwitter"],"mappings":"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","file":"component---src-templates-listing-jsx-1352b475dd4001d7d674.js","sourcesContent":["import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { graphql, Link } from \"gatsby\";\nimport classnames from \"classnames\";\nimport Layout from \"../layout\";\nimport PostListing from \"../components/PostListing/PostListing\";\nimport SEO from \"../components/SEO/SEO\";\nimport config from \"../../data/SiteConfig\";\nimport style from \"./listing.module.scss\";\n\n\nconst Page = ({pageNum, currentPageNum}) => {\n  const isCurrentPage = pageNum === currentPageNum;\n  return (\n    <Link\n      key={pageNum}\n      to={pageNum === 1 ? \"/\" : `/${pageNum}/`}\n      className={classnames([style.page, isCurrentPage && style.current])}\n    >\n      {pageNum}\n    </Link>\n  );\n}\n\nclass Listing extends React.Component {\n\n  renderPagination() {\n    const { currentPageNum, pageCount } = this.props.pageContext;\n    const prevPage = currentPageNum - 1 === 1 ? \"/\" : `/${currentPageNum - 1}/`;\n    const nextPage = `/${currentPageNum + 1}/`;\n    const isFirstPage = currentPageNum === 1;\n    const isLastPage = currentPageNum === pageCount;\n\n    return (\n      <nav aria-label=\"pagination\" className={style.pagination}>\n        {!isFirstPage && <Link to={prevPage} className={style.page}>Previous</Link>}\n        {[...Array(pageCount)].map((_val, index) => (\n          <Page pageNum={index+1} currentPageNum={currentPageNum} />\n        ))}\n        {!isLastPage && <Link to={nextPage} className={style.page}>Next</Link>}\n      </nav>\n    );\n  }\n\n  render() {\n    const postEdges = this.props.data.allMarkdownRemark.edges;\n\n    return (\n      <Layout>\n        <Helmet title={config.siteTitle} />\n        <SEO />\n        <PostListing postEdges={postEdges} />\n        {this.renderPagination()}\n      </Layout>\n    );\n  }\n}\n\nexport default Listing;\n\n/* eslint no-undef: \"off\" */\nexport const listingQuery = graphql`\n  query ListingQuery($skip: Int!, $limit: Int!) {\n    allMarkdownRemark(\n      sort: { fields: [fields___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          ...PostMetadata\n        }\n      }\n    }\n  }\n`;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pagination\":\"listing-module--pagination--SPJLG\",\"page\":\"listing-module--page--2NgA1\",\"current\":\"listing-module--current--WAhOl\"};","import React from \"react\";\nimport _ from \"lodash\";\nimport { Link, graphql } from \"gatsby\";\nimport config from \"../../../data/SiteConfig\";\nimport moment from \"../../utils/moment\";\nimport style from \"./PostListing.module.scss\";\n\nclass PostListing extends React.Component {\n  getPostList() {\n    const postList = [];\n    this.props.postEdges.forEach(postEdge => {\n      postList.push({\n        path: postEdge.node.fields.slug,\n        category: postEdge.node.frontmatter.category,\n        tags: postEdge.node.frontmatter.tags,\n        cover: postEdge.node.frontmatter.cover,\n        title: postEdge.node.frontmatter.title,\n        summary: postEdge.node.frontmatter.summary,\n        date: moment(postEdge.node.fields.date).format(config.dateFormat),\n        excerpt: postEdge.node.excerpt,\n        timeToRead: postEdge.node.timeToRead\n      });\n    });\n    return postList;\n  }\n\n  render() {\n    const postList = this.getPostList();\n    return (\n      <ul className={style.postList}>\n        {/* Your post list here. */\n        postList.map(post => (\n          <li className={style.postCard} key={post.title}>\n            <h3 className={style.postTitle}>\n              <Link to={post.path}>{post.title}</Link>\n            </h3>\n            {post.category\n            ? (\n              <Link className={style.postCategory} to={`/categories/${_.kebabCase(post.category)}`}>\n                {post.category}\n              </Link>\n            ) : null}\n            <time className={style.postDate}>{post.date}</time>\n            {post.summary\n            ? <div className={style.postSummary}>{post.summary}</div>\n            : null}\n          </li>\n        ))\n        }\n      </ul>\n    );\n  }\n}\n\nexport default PostListing;\n\nexport const query = graphql`\n  fragment PostMetadata on MarkdownRemark {\n    excerpt\n    timeToRead\n    frontmatter {\n      title\n      category\n      tags\n      cover\n      summary\n    }\n    fields {\n      slug\n      date\n    }\n  }\n`\n","(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();else if (typeof define === 'function' && define.amd) define(definition);else context[name] = definition();\n})('urljoin', this, function () {\n  function normalize(strArray) {\n    var resultArray = [];\n\n    if (strArray.length === 0) {\n      return '';\n    }\n\n    if (typeof strArray[0] !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + strArray[0]);\n    } // If the first part is a plain protocol, we combine it with the next part.\n\n\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    } // There must be two or three slashes in the file protocol, two slashes in anything else.\n\n\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') {\n        continue;\n      }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n    }\n\n    var str = resultArray.join('/'); // Each input component is now separated by a single slash except the possible first plain protocol part.\n    // remove trailing slash before parameters or hash\n\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1'); // replace ? in parameters with &\n\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?' : '') + parts.join('&');\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n});","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postList\":\"PostListing-module--postList--UNOnL\",\"postCard\":\"PostListing-module--postCard--1vEJh\",\"postTitle\":\"PostListing-module--postTitle--3kS42\",\"postCategory\":\"PostListing-module--postCategory--19QUM\",\"postDate\":\"PostListing-module--postDate--L8PHH\",\"postSummary\":\"PostListing-module--postSummary--2Ezsf\"};","/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n\n/* global define */\n(function () {\n  'use strict';\n\n  var hasOwn = {}.hasOwnProperty;\n\n  function classNames() {\n    var classes = [];\n\n    for (var i = 0; i < arguments.length; i++) {\n      var arg = arguments[i];\n      if (!arg) continue;\n      var argType = typeof arg;\n\n      if (argType === 'string' || argType === 'number') {\n        classes.push(arg);\n      } else if (Array.isArray(arg) && arg.length) {\n        var inner = classNames.apply(null, arg);\n\n        if (inner) {\n          classes.push(inner);\n        }\n      } else if (argType === 'object') {\n        for (var key in arg) {\n          if (hasOwn.call(arg, key) && arg[key]) {\n            classes.push(key);\n          }\n        }\n      }\n    }\n\n    return classes.join(' ');\n  }\n\n  if (typeof module !== 'undefined' && module.exports) {\n    classNames.default = classNames;\n    module.exports = classNames;\n  } else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n    // register as 'classnames', consistent with npm package name\n    define('classnames', [], function () {\n      return classNames;\n    });\n  } else {\n    window.classNames = classNames;\n  }\n})();","import React, { Component } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport urljoin from \"url-join\";\nimport moment from \"../../utils/moment\";\nimport config from \"../../../data/SiteConfig\";\n\nclass SEO extends Component {\n  render() {\n    const { postNode, postPath, postSEO } = this.props;\n    let title;\n    let description;\n    let image;\n    let postURL;\n\n    if (postSEO) {\n      const postMeta = postNode.frontmatter;\n      ({ title } = postMeta);\n      description = postMeta.description\n        ? postMeta.description\n        : postNode.excerpt;\n      image = postMeta.cover ? postMeta.cover : config.siteLogo;\n      postURL = urljoin(config.siteUrl, config.pathPrefix, postPath);\n    } else {\n      title = config.siteTitle;\n      description = config.siteDescription;\n      image = config.siteLogo;\n    }\n\n    const getImagePath = (imageURI) => {\n      if (!imageURI.match(\n        `(https?|ftp|file)://[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]`\n      )) {\n        return urljoin(config.siteUrl, config.pathPrefix, imageURI);\n      }\n      return imageURI;\n    };\n\n    const getPublicationDate = () => {\n      if (!postNode) return null;\n      if (!postNode.frontmatter) return null;\n      if (!postNode.frontmatter.date) return null;\n\n      return moment(postNode.frontmatter.date, config.dateFromFormat).toDate();\n    };\n\n    image = getImagePath(image);\n\n    const datePublished = getPublicationDate();\n\n    const authorJSONLD = {\n      \"@type\": \"Person\",\n      name: config.userName,\n      email: config.userEmail,\n      address: config.userLocation,\n    };\n\n    const logoJSONLD = {\n      \"@type\": \"ImageObject\",\n      url: getImagePath(config.siteLogo),\n    };\n\n    const blogURL = urljoin(config.siteUrl, config.pathPrefix);\n    const schemaOrgJSONLD = [\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"WebSite\",\n        url: blogURL,\n        name: title,\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\",\n      },\n    ];\n    if (postSEO) {\n      schemaOrgJSONLD.push(\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          itemListElement: [\n            {\n              \"@type\": \"ListItem\",\n              position: 1,\n              item: {\n                \"@id\": postURL,\n                name: title,\n                image,\n              },\n            },\n          ],\n        },\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BlogPosting\",\n          url: blogURL,\n          name: title,\n          alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\",\n          headline: title,\n          image: { \"@type\": \"ImageObject\", url: image },\n          author: authorJSONLD,\n          publisher: {\n            ...authorJSONLD,\n            \"@type\": \"Organization\",\n            logo: logoJSONLD,\n          },\n          datePublished,\n          description,\n        }\n      );\n    }\n    return (\n      <Helmet>\n        {/* General tags */}\n        <meta name=\"description\" content={description} />\n        <meta name=\"image\" content={image} />\n\n        {/* Schema.org tags */}\n        <script type=\"application/ld+json\">\n          {JSON.stringify(schemaOrgJSONLD)}\n        </script>\n\n        {/* OpenGraph tags */}\n        <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\n        {postSEO ? <meta property=\"og:type\" content=\"article\" /> : null}\n        <meta property=\"og:title\" content={title} />\n        <meta property=\"og:description\" content={description} />\n        <meta property=\"og:image\" content={image} />\n        <meta\n          property=\"fb:app_id\"\n          content={config.siteFBAppID ? config.siteFBAppID : \"\"}\n        />\n\n        {/* Twitter Card tags */}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta\n          name=\"twitter:creator\"\n          content={config.userTwitter ? config.userTwitter : \"\"}\n        />\n        <meta name=\"twitter:title\" content={title} />\n        <meta name=\"twitter:description\" content={description} />\n        <meta name=\"twitter:image\" content={image} />\n      </Helmet>\n    );\n  }\n}\n\nexport default SEO;\n"],"sourceRoot":""}