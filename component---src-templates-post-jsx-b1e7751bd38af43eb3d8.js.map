{"version":3,"sources":["webpack:///./node_modules/url-join/lib/url-join.js","webpack:///./src/components/PostTags/PostTags.jsx","webpack:///./src/templates/post.jsx","webpack:///./src/templates/post.module.scss","webpack:///./src/components/PostTags/PostTags.module.scss","webpack:///./src/components/SEO/SEO.jsx"],"names":["normalize","strArray","resultArray","length","TypeError","match","first","shift","replace","i","component","push","str","join","parts","split","arguments","slice","call","module","exports","definition","PostTags","render","tags","this","props","className","style","tagContainer","map","tag","key","to","Component","PostTemplate","data","slug","pageContext","postNode","markdownRemark","post","frontmatter","id","Helmet","title","config","siteTitle","SEO","postPath","postSEO","postContainer","titleContainer","category","summary","date","moment","fields","format","dateFormat","content","dangerouslySetInnerHTML","__html","html","React","pageQuery","description","image","postURL","postMeta","excerpt","cover","siteLogo","urljoin","siteUrl","pathPrefix","siteDescription","getImagePath","imageURI","datePublished","dateFromFormat","toDate","authorJSONLD","name","userName","email","userEmail","address","userLocation","logoJSONLD","url","blogURL","schemaOrgJSONLD","alternateName","siteTitleAlt","itemListElement","position","item","headline","author","publisher","logo","type","JSON","stringify","property","siteFBAppID","userTwitter"],"mappings":"0GAAA,YAEoB,WAClB,SAASA,EAAUC,GACjB,IAAIC,EAAc,GAElB,GAAwB,IAApBD,EAASE,OACX,MAAO,GAGT,GAA2B,iBAAhBF,EAAS,GAClB,MAAM,IAAIG,UAAU,kCAAoCH,EAAS,IAInE,GAAIA,EAAS,GAAGI,MAAM,iBAAmBJ,EAASE,OAAS,EAAG,CAC5D,IAAIG,EAAQL,EAASM,QACrBN,EAAS,GAAKK,EAAQL,EAAS,GAI7BA,EAAS,GAAGI,MAAM,gBACpBJ,EAAS,GAAKA,EAAS,GAAGO,QAAQ,gBAAiB,UAEnDP,EAAS,GAAKA,EAAS,GAAGO,QAAQ,gBAAiB,SAGrD,IAAK,IAAIC,EAAI,EAAGA,EAAIR,EAASE,OAAQM,IAAK,CACxC,IAAIC,EAAYT,EAASQ,GAEzB,GAAyB,iBAAdC,EACT,MAAM,IAAIN,UAAU,kCAAoCM,GAGxC,KAAdA,IAIAD,EAAI,IAENC,EAAYA,EAAUF,QAAQ,SAAU,KAKxCE,EAFED,EAAIR,EAASE,OAAS,EAEZO,EAAUF,QAAQ,SAAU,IAG5BE,EAAUF,QAAQ,SAAU,KAG1CN,EAAYS,KAAKD,IAGnB,IAAIE,EAAMV,EAAYW,KAAK,KAKvBC,GAFJF,EAAMA,EAAIJ,QAAQ,kBAAmB,OAErBO,MAAM,KAEtB,OADAH,EAAME,EAAMP,SAAWO,EAAMX,OAAS,EAAI,IAAM,IAAMW,EAAMD,KAAK,KAInE,OAAO,WASL,OAAOb,EANqB,iBAAjBgB,UAAU,GACXA,UAAU,GAEV,GAAGC,MAAMC,KAAKF,cArEWG,EAAOC,QAASD,EAAOC,QAAUC,SAAmF,0BAAjB,KAAiB,mC,iRCyB5IC,E,kGApBbC,OAAA,WAAU,IACAC,EAASC,KAAKC,MAAdF,KACR,OAAKA,EAGH,yBAAKG,UAAWC,IAAMC,cACnBL,EAAKM,KAAI,SAAAC,GAAG,OACX,kBAAC,OAAD,CACEC,IAAKD,EACLE,GAAE,SAAW,IAAYF,GACzBJ,UAAWC,IAAMG,KAHnB,IAKOA,OAVK,M,GAHCG,a,6CCOFC,E,kGACnBZ,OAAA,WAAU,IAAD,EACuBE,KAAKC,MAA3BU,EADD,EACCA,KACAC,EAFD,EACOC,YACND,KACFE,EAAWH,EAAKI,eAChBC,EAAOF,EAASG,YAKtB,OAJKD,EAAKE,KACRF,EAAKE,GAAKN,GAIV,kBAAC,IAAD,KACE,kBAACO,EAAA,EAAD,KACE,+BAAWH,EAAKI,MAAhB,MAA2BC,IAAOC,YAEpC,kBAACC,EAAA,EAAD,CAAKC,SAAUZ,EAAME,SAAUA,EAAUW,SAAO,IAChD,yBAAKvB,UAAWC,IAAMuB,eACpB,yBAAKxB,UAAWC,IAAMwB,gBACpB,wBAAIzB,UAAWC,IAAMiB,OAAQJ,EAAKI,OACjCJ,EAAKY,UACJ,kBAAC,OAAD,CAAM1B,UAAWC,IAAMyB,SAAUpB,GAAE,eAAiB,IAAYQ,EAAKY,WAClEZ,EAAKY,UAGTZ,EAAKa,SAAW,yBAAK3B,UAAWC,IAAM0B,SAAUb,EAAKa,SACtD,0BAAM3B,UAAWC,IAAM2B,MACpBC,YAAOjB,EAASkB,OAAOF,MAAMG,OAAOZ,IAAOa,cAGhD,yBACEhC,UAAWC,IAAMgC,QACjBC,wBAAyB,CAAEC,OAAQvB,EAASwB,QAE9C,kBAAC,EAAD,CAAUvC,KAAMiB,EAAKjB,U,GAjCWwC,IAAM9B,WAyCnC+B,EAAS,a,uBCpDtB9C,EAAOC,QAAU,CAAC,cAAgB,oCAAoC,eAAiB,qCAAqC,QAAU,8BAA8B,SAAW,+BAA+B,KAAO,2BAA2B,QAAU,gC,qBCA1PD,EAAOC,QAAU,CAAC,aAAe,uCAAuC,IAAM,gC,yICKxE4B,E,kGACJzB,OAAA,WAAU,IAEJsB,EACAqB,EACAC,EACAC,EALG,EACiC3C,KAAKC,MAArCa,EADD,EACCA,SAAUU,EADX,EACWA,SAAUC,EADrB,EACqBA,QAM5B,GAAIA,EAAS,CACX,IAAMmB,EAAW9B,EAASG,YACvBG,EAAUwB,EAAVxB,MACHqB,EAAcG,EAASf,QACnBe,EAASf,QACTf,EAAS+B,QACbH,EAAQE,EAASE,MAAQF,EAASE,MAAQzB,IAAO0B,SACjDJ,EAAUK,IAAQ3B,IAAO4B,QAAS5B,IAAO6B,WAAY1B,QAErDJ,EAAQC,IAAOC,UACfmB,EAAcpB,IAAO8B,gBACrBT,EAAQrB,IAAO0B,SAGjB,IAAMK,EAAe,SAACC,GACpB,OAAKA,EAASzE,MAAT,2EAKEyE,EAFEL,IAAQ3B,IAAO4B,QAAS5B,IAAO6B,WAAYG,IAatDX,EAAQU,EAAaV,GAErB,IAAMY,EATCxC,GACAA,EAASG,aACTH,EAASG,YAAYa,KAEnBC,YAAOjB,EAASG,YAAYa,KAAMT,IAAOkC,gBAAgBC,SAJ1C,KAWlBC,EAAe,CACnB,QAAS,SACTC,KAAMrC,IAAOsC,SACbC,MAAOvC,IAAOwC,UACdC,QAASzC,IAAO0C,cAGZC,EAAa,CACjB,QAAS,cACTC,IAAKb,EAAa/B,IAAO0B,WAGrBmB,EAAUlB,IAAQ3B,IAAO4B,QAAS5B,IAAO6B,YACzCiB,EAAkB,CACtB,CACE,WAAY,oBACZ,QAAS,UACTF,IAAKC,EACLR,KAAMtC,EACNgD,cAAe/C,IAAOgD,aAAehD,IAAOgD,aAAe,KAuC/D,OApCI5C,GACF0C,EAAgBjF,KACd,CACE,WAAY,oBACZ,QAAS,iBACToF,gBAAiB,CACf,CACE,QAAS,WACTC,SAAU,EACVC,KAAM,CACJ,MAAO7B,EACPe,KAAMtC,EACNsB,YAKR,CACE,WAAY,oBACZ,QAAS,cACTuB,IAAKC,EACLR,KAAMtC,EACNgD,cAAe/C,IAAOgD,aAAehD,IAAOgD,aAAe,GAC3DI,SAAUrD,EACVsB,MAAO,CAAE,QAAS,cAAeuB,IAAKvB,GACtCgC,OAAQjB,EACRkB,UAAU,OAAD,UACJlB,EADI,CAEP,QAAS,eACTmB,KAAMZ,IAERV,gBACAb,gBAKJ,kBAAC,IAAD,KAEE,0BAAMiB,KAAK,cAAcvB,QAASM,IAClC,0BAAMiB,KAAK,QAAQvB,QAASO,IAG5B,4BAAQmC,KAAK,uBACVC,KAAKC,UAAUZ,IAIlB,0BAAMa,SAAS,SAAS7C,QAASV,EAAUkB,EAAUuB,IACpDzC,EAAU,0BAAMuD,SAAS,UAAU7C,QAAQ,YAAe,KAC3D,0BAAM6C,SAAS,WAAW7C,QAASf,IACnC,0BAAM4D,SAAS,iBAAiB7C,QAASM,IACzC,0BAAMuC,SAAS,WAAW7C,QAASO,IACnC,0BACEsC,SAAS,YACT7C,QAASd,IAAO4D,YAAc5D,IAAO4D,YAAc,KAIrD,0BAAMvB,KAAK,eAAevB,QAAQ,wBAClC,0BACEuB,KAAK,kBACLvB,QAASd,IAAO6D,YAAc7D,IAAO6D,YAAc,KAErD,0BAAMxB,KAAK,gBAAgBvB,QAASf,IACpC,0BAAMsC,KAAK,sBAAsBvB,QAASM,IAC1C,0BAAMiB,KAAK,gBAAgBvB,QAASO,M,GAnI1BjC,aAyIHc","file":"component---src-templates-post-jsx-b1e7751bd38af43eb3d8.js","sourcesContent":["(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();else if (typeof define === 'function' && define.amd) define(definition);else context[name] = definition();\n})('urljoin', this, function () {\n  function normalize(strArray) {\n    var resultArray = [];\n\n    if (strArray.length === 0) {\n      return '';\n    }\n\n    if (typeof strArray[0] !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + strArray[0]);\n    } // If the first part is a plain protocol, we combine it with the next part.\n\n\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    } // There must be two or three slashes in the file protocol, two slashes in anything else.\n\n\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') {\n        continue;\n      }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n    }\n\n    var str = resultArray.join('/'); // Each input component is now separated by a single slash except the possible first plain protocol part.\n    // remove trailing slash before parameters or hash\n\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1'); // replace ? in parameters with &\n\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?' : '') + parts.join('&');\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n});","import React, { Component } from \"react\";\nimport _ from \"lodash\";\nimport { Link } from \"gatsby\";\nimport style from \"./PostTags.module.scss\";\n\nclass PostTags extends Component {\n  render() {\n    const { tags } = this.props;\n    if (!tags) return null;\n\n    return (\n      <div className={style.tagContainer}>\n        {tags.map(tag => (\n          <Link\n            key={tag}\n            to={`/tags/${_.kebabCase(tag)}`}\n            className={style.tag}\n          >\n            {`#${tag}`}\n          </Link>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default PostTags;\n","import React from \"react\";\nimport _ from \"lodash\";\nimport { Helmet } from \"react-helmet\";\nimport { Link, graphql } from \"gatsby\";\nimport config from \"../../data/SiteConfig\";\nimport moment from \"../utils/moment\";\nimport Layout from \"../layout\";\nimport PostTags from \"../components/PostTags/PostTags\";\nimport SEO from \"../components/SEO/SEO\";\nimport \"./b16-tomorrow-dark.scss\";\nimport style from \"./post.module.scss\";\n\nexport default class PostTemplate extends React.Component {\n  render() {\n    const { data, pageContext } = this.props;\n    const { slug } = pageContext;\n    const postNode = data.markdownRemark;\n    const post = postNode.frontmatter;\n    if (!post.id) {\n      post.id = slug;\n    }\n\n    return (\n      <Layout>\n        <Helmet>\n          <title>{`${post.title} | ${config.siteTitle}`}</title>\n        </Helmet>\n        <SEO postPath={slug} postNode={postNode} postSEO />\n        <div className={style.postContainer}>\n          <div className={style.titleContainer}>\n            <h1 className={style.title}>{post.title}</h1>\n            {post.category && (\n              <Link className={style.category} to={`/categories/${_.kebabCase(post.category)}`}>\n                {post.category}\n              </Link>\n            )}\n            {post.summary && <div className={style.summary}>{post.summary}</div>}\n            <time className={style.date}>\n              {moment(postNode.fields.date).format(config.dateFormat)}\n            </time>\n          </div>\n          <div\n            className={style.content}\n            dangerouslySetInnerHTML={{ __html: postNode.html }}\n          />\n          <PostTags tags={post.tags} />\n        </div>\n      </Layout>\n    );\n  }\n}\n\n/* eslint no-undef: \"off\" */\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      timeToRead\n      excerpt\n      frontmatter {\n        title\n        cover\n        category\n        tags\n        summary\n      }\n      fields {\n        slug\n        date\n      }\n    }\n  }\n`;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postContainer\":\"post-module--postContainer--ETnUp\",\"titleContainer\":\"post-module--titleContainer--21MSY\",\"summary\":\"post-module--summary--1osDj\",\"category\":\"post-module--category--3HOTO\",\"date\":\"post-module--date--2uDW8\",\"content\":\"post-module--content--J5WVo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tagContainer\":\"PostTags-module--tagContainer--18xmh\",\"tag\":\"PostTags-module--tag--2s29v\"};","import React, { Component } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport urljoin from \"url-join\";\nimport moment from \"../../utils/moment\";\nimport config from \"../../../data/SiteConfig\";\n\nclass SEO extends Component {\n  render() {\n    const { postNode, postPath, postSEO } = this.props;\n    let title;\n    let description;\n    let image;\n    let postURL;\n\n    if (postSEO) {\n      const postMeta = postNode.frontmatter;\n      ({ title } = postMeta);\n      description = postMeta.summary\n        ? postMeta.summary\n        : postNode.excerpt;\n      image = postMeta.cover ? postMeta.cover : config.siteLogo;\n      postURL = urljoin(config.siteUrl, config.pathPrefix, postPath);\n    } else {\n      title = config.siteTitle;\n      description = config.siteDescription;\n      image = config.siteLogo;\n    }\n\n    const getImagePath = (imageURI) => {\n      if (!imageURI.match(\n        `(https?|ftp|file)://[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]`\n      )) {\n        return urljoin(config.siteUrl, config.pathPrefix, imageURI);\n      }\n      return imageURI;\n    };\n\n    const getPublicationDate = () => {\n      if (!postNode) return null;\n      if (!postNode.frontmatter) return null;\n      if (!postNode.frontmatter.date) return null;\n\n      return moment(postNode.frontmatter.date, config.dateFromFormat).toDate();\n    };\n\n    image = getImagePath(image);\n\n    const datePublished = getPublicationDate();\n\n    const authorJSONLD = {\n      \"@type\": \"Person\",\n      name: config.userName,\n      email: config.userEmail,\n      address: config.userLocation,\n    };\n\n    const logoJSONLD = {\n      \"@type\": \"ImageObject\",\n      url: getImagePath(config.siteLogo),\n    };\n\n    const blogURL = urljoin(config.siteUrl, config.pathPrefix);\n    const schemaOrgJSONLD = [\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"WebSite\",\n        url: blogURL,\n        name: title,\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\",\n      },\n    ];\n    if (postSEO) {\n      schemaOrgJSONLD.push(\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          itemListElement: [\n            {\n              \"@type\": \"ListItem\",\n              position: 1,\n              item: {\n                \"@id\": postURL,\n                name: title,\n                image,\n              },\n            },\n          ],\n        },\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BlogPosting\",\n          url: blogURL,\n          name: title,\n          alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\",\n          headline: title,\n          image: { \"@type\": \"ImageObject\", url: image },\n          author: authorJSONLD,\n          publisher: {\n            ...authorJSONLD,\n            \"@type\": \"Organization\",\n            logo: logoJSONLD,\n          },\n          datePublished,\n          description,\n        }\n      );\n    }\n    return (\n      <Helmet>\n        {/* General tags */}\n        <meta name=\"description\" content={description} />\n        <meta name=\"image\" content={image} />\n\n        {/* Schema.org tags */}\n        <script type=\"application/ld+json\">\n          {JSON.stringify(schemaOrgJSONLD)}\n        </script>\n\n        {/* OpenGraph tags */}\n        <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\n        {postSEO ? <meta property=\"og:type\" content=\"article\" /> : null}\n        <meta property=\"og:title\" content={title} />\n        <meta property=\"og:description\" content={description} />\n        <meta property=\"og:image\" content={image} />\n        <meta\n          property=\"fb:app_id\"\n          content={config.siteFBAppID ? config.siteFBAppID : \"\"}\n        />\n\n        {/* Twitter Card tags */}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta\n          name=\"twitter:creator\"\n          content={config.userTwitter ? config.userTwitter : \"\"}\n        />\n        <meta name=\"twitter:title\" content={title} />\n        <meta name=\"twitter:description\" content={description} />\n        <meta name=\"twitter:image\" content={image} />\n      </Helmet>\n    );\n  }\n}\n\nexport default SEO;\n"],"sourceRoot":""}