{"version":3,"sources":["webpack:///./src/templates/listing.jsx","webpack:///./src/components/PostListing/PostListing.jsx","webpack:///./node_modules/url-join/lib/url-join.js","webpack:///./src/components/PostListing/PostListing.module.scss","webpack:///./src/components/SEO/SEO.jsx"],"names":["Listing","renderPaging","this","props","pageContext","currentPageNum","pageCount","prevPage","nextPage","isFirstPage","isLastPage","className","to","Array","map","_val","index","pageNum","key","render","postEdges","data","allMarkdownRemark","edges","title","config","siteTitle","React","Component","listingQuery","PostListing","getPostList","postList","forEach","postEdge","push","path","node","fields","slug","category","frontmatter","tags","cover","summary","date","moment","format","dateFormat","excerpt","timeToRead","style","post","postCard","postTitle","postCategory","postDate","postSummary","definition","normalize","strArray","resultArray","length","TypeError","match","first","shift","replace","i","component","str","join","parts","split","arguments","slice","call","module","exports","SEO","description","image","postURL","postNode","postPath","postSEO","postMeta","urljoin","siteUrl","pathPrefix","siteDescription","siteLogo","getImagePath","imageURI","datePublished","dateFromFormat","toDate","authorJSONLD","name","userName","email","userEmail","address","userLocation","logoJSONLD","url","blogURL","schemaOrgJSONLD","alternateName","siteTitleAlt","itemListElement","position","item","headline","author","publisher","logo","content","type","JSON","stringify","property","siteFBAppID","userTwitter"],"mappings":"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","file":"component---src-templates-listing-jsx-fdb5f2e8ac103923198b.js","sourcesContent":["import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { graphql, Link } from \"gatsby\";\nimport Layout from \"../layout\";\nimport PostListing from \"../components/PostListing/PostListing\";\nimport SEO from \"../components/SEO/SEO\";\nimport config from \"../../data/SiteConfig\";\nimport \"./listing.css\";\n\nclass Listing extends React.Component {\n  renderPaging() {\n    const { currentPageNum, pageCount } = this.props.pageContext;\n    const prevPage = currentPageNum - 1 === 1 ? \"/\" : `/${currentPageNum - 1}/`;\n    const nextPage = `/${currentPageNum + 1}/`;\n    const isFirstPage = currentPageNum === 1;\n    const isLastPage = currentPageNum === pageCount;\n\n    return (\n      <div className=\"paging-container\">\n        {!isFirstPage && <Link to={prevPage}>Previous</Link>}\n        {[...Array(pageCount)].map((_val, index) => {\n          const pageNum = index + 1;\n          return (\n            <Link\n              key={`listing-page-${pageNum}`}\n              to={pageNum === 1 ? \"/\" : `/${pageNum}/`}\n            >\n              {pageNum}\n            </Link>\n          );\n        })}\n        {!isLastPage && <Link to={nextPage}>Next</Link>}\n      </div>\n    );\n  }\n\n  render() {\n    const postEdges = this.props.data.allMarkdownRemark.edges;\n\n    return (\n      <Layout>\n        <div className=\"listing-container\">\n          <div className=\"posts-container\">\n            <Helmet title={config.siteTitle} />\n            <SEO />\n            <PostListing postEdges={postEdges} />\n          </div>\n          {this.renderPaging()}\n        </div>\n      </Layout>\n    );\n  }\n}\n\nexport default Listing;\n\n/* eslint no-undef: \"off\" */\nexport const listingQuery = graphql`\n  query ListingQuery($skip: Int!, $limit: Int!) {\n    allMarkdownRemark(\n      sort: { fields: [fields___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n            date\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            category\n            tags\n            cover\n            summary\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport _ from \"lodash\";\nimport { Link } from \"gatsby\";\nimport style from \"./PostListing.module.scss\";\nimport config from \"../../../data/SiteConfig\";\nimport moment from \"moment\";\n\nclass PostListing extends React.Component {\n  getPostList() {\n    const postList = [];\n    this.props.postEdges.forEach(postEdge => {\n      postList.push({\n        path: postEdge.node.fields.slug,\n        category: postEdge.node.frontmatter.category,\n        tags: postEdge.node.frontmatter.tags,\n        cover: postEdge.node.frontmatter.cover,\n        title: postEdge.node.frontmatter.title,\n        summary: postEdge.node.frontmatter.summary,\n        date: moment(postEdge.node.fields.date).format(config.dateFormat),\n        excerpt: postEdge.node.excerpt,\n        timeToRead: postEdge.node.timeToRead\n      });\n    });\n    return postList;\n  }\n\n  render() {\n    const postList = this.getPostList();\n    return (\n      <ul className={style.postList}>\n        {/* Your post list here. */\n        postList.map(post => (\n          <li className={style.postCard} key={post.title}>\n            <h3 className={style.postTitle}>\n              <Link to={post.path}>{post.title}</Link>\n            </h3>\n            {post.category\n            ? (\n              <Link className={style.postCategory} to={`/tags/${_.kebabCase(post.category)}`}>\n                {post.category}\n              </Link>\n            ) : null}\n            <time className={style.postDate}>{post.date}</time>\n            {post.summary\n            ? <div className={style.postSummary}>{post.summary}</div>\n            : null}\n          </li>\n        ))\n        }\n      </ul>\n    );\n  }\n}\n\nexport default PostListing;\n","require(\"core-js/modules/es6.regexp.split\");\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nrequire(\"core-js/modules/es6.regexp.match\");\n\n(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();else if (typeof define === 'function' && define.amd) define(definition);else context[name] = definition();\n})('urljoin', this, function () {\n  function normalize(strArray) {\n    var resultArray = [];\n\n    if (strArray.length === 0) {\n      return '';\n    }\n\n    if (typeof strArray[0] !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + strArray[0]);\n    } // If the first part is a plain protocol, we combine it with the next part.\n\n\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    } // There must be two or three slashes in the file protocol, two slashes in anything else.\n\n\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') {\n        continue;\n      }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n    }\n\n    var str = resultArray.join('/'); // Each input component is now separated by a single slash except the possible first plain protocol part.\n    // remove trailing slash before parameters or hash\n\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1'); // replace ? in parameters with &\n\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?' : '') + parts.join('&');\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n});","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postList\":\"PostListing-module--postList--UNOnL\",\"postCard\":\"PostListing-module--postCard--1vEJh\",\"postTitle\":\"PostListing-module--postTitle--3kS42\",\"postCategory\":\"PostListing-module--postCategory--19QUM\",\"postDate\":\"PostListing-module--postDate--L8PHH\",\"postSummary\":\"PostListing-module--postSummary--2Ezsf\"};","import React, { Component } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport urljoin from \"url-join\";\nimport moment from \"moment\";\nimport config from \"../../../data/SiteConfig\";\n\nclass SEO extends Component {\n  render() {\n    const { postNode, postPath, postSEO } = this.props;\n    let title;\n    let description;\n    let image;\n    let postURL;\n\n    if (postSEO) {\n      const postMeta = postNode.frontmatter;\n      ({ title } = postMeta);\n      description = postMeta.description\n        ? postMeta.description\n        : postNode.excerpt;\n      image = postMeta.cover;\n      postURL = urljoin(config.siteUrl, config.pathPrefix, postPath);\n    } else {\n      title = config.siteTitle;\n      description = config.siteDescription;\n      image = config.siteLogo;\n    }\n\n    const getImagePath = (imageURI) => {\n      if (\n        !imageURI.match(\n          `(https?|ftp|file)://[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]`\n        )\n      )\n        return urljoin(config.siteUrl, config.pathPrefix, imageURI);\n\n      return imageURI;\n    };\n\n    const getPublicationDate = () => {\n      if (!postNode) return null;\n\n      if (!postNode.frontmatter) return null;\n\n      if (!postNode.frontmatter.date) return null;\n\n      return moment(postNode.frontmatter.date, config.dateFromFormat).toDate();\n    };\n\n    image = getImagePath(image);\n\n    const datePublished = getPublicationDate();\n\n    const authorJSONLD = {\n      \"@type\": \"Person\",\n      name: config.userName,\n      email: config.userEmail,\n      address: config.userLocation,\n    };\n\n    const logoJSONLD = {\n      \"@type\": \"ImageObject\",\n      url: getImagePath(config.siteLogo),\n    };\n\n    const blogURL = urljoin(config.siteUrl, config.pathPrefix);\n    const schemaOrgJSONLD = [\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"WebSite\",\n        url: blogURL,\n        name: title,\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\",\n      },\n    ];\n    if (postSEO) {\n      schemaOrgJSONLD.push(\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          itemListElement: [\n            {\n              \"@type\": \"ListItem\",\n              position: 1,\n              item: {\n                \"@id\": postURL,\n                name: title,\n                image,\n              },\n            },\n          ],\n        },\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BlogPosting\",\n          url: blogURL,\n          name: title,\n          alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\",\n          headline: title,\n          image: { \"@type\": \"ImageObject\", url: image },\n          author: authorJSONLD,\n          publisher: {\n            ...authorJSONLD,\n            \"@type\": \"Organization\",\n            logo: logoJSONLD,\n          },\n          datePublished,\n          description,\n        }\n      );\n    }\n    return (\n      <Helmet>\n        {/* General tags */}\n        <meta name=\"description\" content={description} />\n        <meta name=\"image\" content={image} />\n\n        {/* Schema.org tags */}\n        <script type=\"application/ld+json\">\n          {JSON.stringify(schemaOrgJSONLD)}\n        </script>\n\n        {/* OpenGraph tags */}\n        <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\n        {postSEO ? <meta property=\"og:type\" content=\"article\" /> : null}\n        <meta property=\"og:title\" content={title} />\n        <meta property=\"og:description\" content={description} />\n        <meta property=\"og:image\" content={image} />\n        <meta\n          property=\"fb:app_id\"\n          content={config.siteFBAppID ? config.siteFBAppID : \"\"}\n        />\n\n        {/* Twitter Card tags */}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta\n          name=\"twitter:creator\"\n          content={config.userTwitter ? config.userTwitter : \"\"}\n        />\n        <meta name=\"twitter:title\" content={title} />\n        <meta name=\"twitter:description\" content={description} />\n        <meta name=\"twitter:image\" content={image} />\n      </Helmet>\n    );\n  }\n}\n\nexport default SEO;\n"],"sourceRoot":""}