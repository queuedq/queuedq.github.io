{"version":3,"sources":["webpack:///./src/components/PostListing/PostListing.jsx","webpack:///./src/components/PostListing/PostListing.module.scss","webpack:///./src/templates/category.jsx"],"names":["PostListing","getPostList","postList","this","props","postEdges","forEach","postEdge","push","path","node","fields","slug","category","frontmatter","tags","cover","title","summary","date","moment","format","config","dateFormat","excerpt","timeToRead","render","className","style","map","post","postCard","key","postTitle","to","postCategory","postDate","postSummary","React","Component","module","exports","CategoryTemplate","pageContext","data","allMarkdownRemark","edges","siteTitle","pageQuery"],"mappings":"0NAOMA,E,0GACJC,YAAA,WACE,IAAMC,EAAW,GAcjB,OAbAC,KAAKC,MAAMC,UAAUC,SAAQ,SAAAC,GAC3BL,EAASM,KAAK,CACZC,KAAMF,EAASG,KAAKC,OAAOC,KAC3BC,SAAUN,EAASG,KAAKI,YAAYD,SACpCE,KAAMR,EAASG,KAAKI,YAAYC,KAChCC,MAAOT,EAASG,KAAKI,YAAYE,MACjCC,MAAOV,EAASG,KAAKI,YAAYG,MACjCC,QAASX,EAASG,KAAKI,YAAYI,QACnCC,KAAMC,YAAOb,EAASG,KAAKC,OAAOQ,MAAME,OAAOC,IAAOC,YACtDC,QAASjB,EAASG,KAAKc,QACvBC,WAAYlB,EAASG,KAAKe,gBAGvBvB,G,EAGTwB,OAAA,WACE,IAAMxB,EAAWC,KAAKF,cACtB,OACE,wBAAI0B,UAAWC,IAAM1B,UAEnBA,EAAS2B,KAAI,SAAAC,GAAI,OACf,wBAAIH,UAAWC,IAAMG,SAAUC,IAAKF,EAAKb,OACvC,wBAAIU,UAAWC,IAAMK,WACnB,kBAAC,OAAD,CAAMC,GAAIJ,EAAKrB,MAAOqB,EAAKb,QAE5Ba,EAAKjB,SAEJ,kBAAC,OAAD,CAAMc,UAAWC,IAAMO,aAAcD,GAAE,eAAiB,IAAYJ,EAAKjB,WACtEiB,EAAKjB,UAEN,KACJ,0BAAMc,UAAWC,IAAMQ,UAAWN,EAAKX,MACtCW,EAAKZ,QACJ,yBAAKS,UAAWC,IAAMS,aAAcP,EAAKZ,SACzC,W,GAtCYoB,IAAMC,WA+CjBvC,O,qBCrDfwC,EAAOC,QAAU,CAAC,SAAW,sCAAsC,SAAW,sCAAsC,UAAY,uCAAuC,aAAe,0CAA0C,SAAW,sCAAsC,YAAc,2C,yNCM1QC,E,kGACnBhB,OAAA,WAAU,IACAb,EAAaV,KAAKC,MAAMuC,YAAxB9B,SACFR,EAAYF,KAAKC,MAAMwC,KAAKC,kBAAkBC,MACpD,OACE,kBAAC,IAAD,KACE,yBAAKnB,UAAU,sBACb,kBAAC,IAAD,CACEV,MAAK,sBAAwBJ,EAAxB,OAAuCS,IAAOyB,YAErD,kBAAC,IAAD,CAAa1C,UAAWA,O,GAVYiC,IAAMC,WAkBvCS,EAAS","file":"component---src-templates-category-jsx-1db2ae43470ef9bd83af.js","sourcesContent":["import React from \"react\";\nimport _ from \"lodash\";\nimport { Link, graphql } from \"gatsby\";\nimport config from \"../../../data/SiteConfig\";\nimport moment from \"../../utils/moment\";\nimport style from \"./PostListing.module.scss\";\n\nclass PostListing extends React.Component {\n  getPostList() {\n    const postList = [];\n    this.props.postEdges.forEach(postEdge => {\n      postList.push({\n        path: postEdge.node.fields.slug,\n        category: postEdge.node.frontmatter.category,\n        tags: postEdge.node.frontmatter.tags,\n        cover: postEdge.node.frontmatter.cover,\n        title: postEdge.node.frontmatter.title,\n        summary: postEdge.node.frontmatter.summary,\n        date: moment(postEdge.node.fields.date).format(config.dateFormat),\n        excerpt: postEdge.node.excerpt,\n        timeToRead: postEdge.node.timeToRead\n      });\n    });\n    return postList;\n  }\n\n  render() {\n    const postList = this.getPostList();\n    return (\n      <ul className={style.postList}>\n        {/* Your post list here. */\n        postList.map(post => (\n          <li className={style.postCard} key={post.title}>\n            <h3 className={style.postTitle}>\n              <Link to={post.path}>{post.title}</Link>\n            </h3>\n            {post.category\n            ? (\n              <Link className={style.postCategory} to={`/categories/${_.kebabCase(post.category)}`}>\n                {post.category}\n              </Link>\n            ) : null}\n            <time className={style.postDate}>{post.date}</time>\n            {post.summary\n            ? <div className={style.postSummary}>{post.summary}</div>\n            : null}\n          </li>\n        ))\n        }\n      </ul>\n    );\n  }\n}\n\nexport default PostListing;\n\nexport const query = graphql`\n  fragment PostMetadata on MarkdownRemark {\n    excerpt\n    timeToRead\n    frontmatter {\n      title\n      category\n      tags\n      cover\n      summary\n    }\n    fields {\n      slug\n      date\n    }\n  }\n`\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postList\":\"PostListing-module--postList--UNOnL\",\"postCard\":\"PostListing-module--postCard--1vEJh\",\"postTitle\":\"PostListing-module--postTitle--3kS42\",\"postCategory\":\"PostListing-module--postCategory--19QUM\",\"postDate\":\"PostListing-module--postDate--L8PHH\",\"postSummary\":\"PostListing-module--postSummary--2Ezsf\"};","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { graphql } from \"gatsby\";\nimport Layout from \"../layout\";\nimport PostListing from \"../components/PostListing/PostListing\";\nimport config from \"../../data/SiteConfig\";\n\nexport default class CategoryTemplate extends React.Component {\n  render() {\n    const { category } = this.props.pageContext;\n    const postEdges = this.props.data.allMarkdownRemark.edges;\n    return (\n      <Layout>\n        <div className=\"category-container\">\n          <Helmet\n            title={`Posts in category \"${category}\" | ${config.siteTitle}`}\n          />\n          <PostListing postEdges={postEdges} />\n        </div>\n      </Layout>\n    );\n  }\n}\n\n/* eslint no-undef: \"off\" */\nexport const pageQuery = graphql`\n  query CategoryPage($category: String) {\n    allMarkdownRemark(\n      limit: 1000\n      sort: { fields: [fields___date], order: DESC }\n      filter: { frontmatter: { category: { eq: $category } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          ...PostMetadata\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}